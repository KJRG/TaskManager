package com.starterkit.views.dataprovider.impl;

import java.sql.Date;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.ListIterator;

import org.eclipse.core.databinding.observable.list.WritableList;

import com.starterkit.views.dataprovider.DataProvider;
import com.starterkit.views.models.Task;
import com.starterkit.views.models.TaskStatus;

public class DataProviderImpl implements DataProvider {
	
	private static DataProviderImpl instance = new DataProviderImpl();
	
	public static DataProviderImpl getInstance() {
		return instance;
	}
	
	private List<Task> openTasks;
	private List<Task> closedTasks;
	private WritableList openTasksWritable;
	private WritableList closedTasksWritable;
	
	private DataProviderImpl() {
		
		openTasks = new ArrayList<>();
		closedTasks = new ArrayList<>();
		openTasksWritable = new WritableList(openTasks, Task.class);
		closedTasksWritable = new WritableList(closedTasks, Task.class);
		
		/*
		 * Initialize the list with sample tasks.
		 */
		
		openTasks.add(new Task(1L, "Task 1", TaskStatus.OPEN, Date.valueOf("2015-09-07")));
		openTasks.add(new Task(2L, "Task 2", TaskStatus.OPEN, Date.valueOf("2015-09-08")));
		openTasks.add(new Task(3L, "Task 3", TaskStatus.OPEN, Date.valueOf("2015-09-18")));
		openTasks.add(new Task(4L, "Task 4", TaskStatus.OPEN, Date.valueOf("2015-09-21")));
		openTasks.add(new Task(5L, "Task 5", TaskStatus.OPEN, Date.valueOf("2015-11-08")));
	}

	@Override
	public Collection<Task> findAllTasks() {
		return openTasks;
	}
	
	public WritableList getWritable() {
		return openTasksWritable;
	}

	@Override
	public Collection<Task> findOpenedTasks() {
		List<Task> result = new ArrayList<>();
		
		for(Task t : openTasks) {
			if(t.getStatus() == TaskStatus.OPEN) {
				result.add(t);
			}
		}
		
		return result;
	}

	@Override
	public Task addTask(Task task) {
		/*
		 * Find next task id.
		 */
		Long nextTaskId = 0L;
		for(Task t : openTasks) {
			if(t.getId() > nextTaskId) {
				nextTaskId = t.getId();
			}
		}
		nextTaskId++;
		
		/*
		 * Set the id and add task.
		 */
		task.setId(nextTaskId);
		openTasksWritable.add(task);
		
		return task;
	}

	@Override
	public void closeTask(Long id) {
		ListIterator<Task> iterator = openTasksWritable.listIterator();
		while(iterator.hasNext()) {
			Task t = iterator.next();
			if(t.getId() == id) {
				t.setStatus(TaskStatus.CLOSED);
				break;
			}
		}
		
		/*
		 * For Java 8:
		 */
		// tasks.removeIf(t -> t.getId() == id);
	}

	@Override
	public void removeTask(Long id) {
		ListIterator<Task> iterator = openTasksWritable.listIterator();
		while(iterator.hasNext()) {
			Task t = iterator.next();
			if(t.getId() == id) {
				openTasksWritable.remove(t);
				break;
			}
		}
	}
}
